import React from 'react';
import AddressShow from '../components/AddressShow';
import { configure, shallow } from 'enzyme';
import addresses from '../address-list';
import Adapter from 'enzyme-adapter-react-16';
import '../css/index.css';
configure({ adapter: new Adapter() });

describe('AddressShow Suite', function() {
    const debug = false;

    // const addressTest = {
    //     firstName: 'Patty',
    //     lastName: 'Murray',
    //     street: '154 Russell Senate Office Building',
    //     city: 'Washington',
    //     state: 'D.C.',
    //     zip: '20510',
    //     phone: '(202) 224-2621',
    //     website: 'https://www.murray.senate.gov/',
    //     contact: 'https://www.murray.senate.gov/public/index.cfm/contactme'
    // };

    /*
    * Display debug information about a DOM node of a component by index
    * @param {object} wrapper - The HTML generated by your component
    * @param {number} index - Index of HTML element you want to see.
    * @param {boolean} talkToMe - Speak even if quiet is true
    */
    const getIndex = function(wrapper, index, talkToMe) {
        if (debug || talkToMe) {
            const ninep = wrapper
                .find('div#addressShow')
                .childAt(index)
                .debug();
            console.log('NINEP:', ninep);
        }
    };

    //let wrapper = null;

    // const setAddress = () => {
    //     const address = addresses[1];
    //     wrapper.setProps({ address: address });
    // };

    const defaultFieldTest = (name, index, talkToMe) => {
        const wrapper = shallow(<AddressShow address={addresses[0]} />);
        const welcome = <p className="App-intro">{name}</p>;
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.dive().contains(welcome)).toEqual(true);
    };

    // const afterClickFieldTest = (name) => {
    //     wrapper = shallow(<AddressShow address={addresses[0]} setAddress={setAddress}/>);
    //     const patty = <p className="App-intro">{name}</p>;
    //     wrapper.dive().find('#setAddress').simulate('click');
    //     expect(wrapper.dive().contains(patty)).toBe(true);
    // };

    it('renders and displays the first name', () => {
        defaultFieldTest('First Name: unknown', 0);
        //    afterClickFieldTest('First Name: ' + addressTest.firstName, 0);
    });
    //
    it('renders and displays the last name', () => {
        defaultFieldTest('Last Name: unknown', 0);
        //afterClickFieldTest('Last Name: ' + addressTest.lastName, 0);
    });
    //
    it('renders and displays the street', () => {
        defaultFieldTest('Street: unknown', 0);
        //afterClickFieldTest('Street: ' + addressTest.address, 0);
    });

    it('renders and displays the city', () => {
        defaultFieldTest('City: unknown', 0);
        //afterClickFieldTest('City: ' + addressTest.city, 0);
    });

    it('renders and displays the state', () => {
        defaultFieldTest('State: unknown', 0);
        //afterClickFieldTest('State: ' + addressTest.state, 0);
    });

    it('renders and displays the zip', () => {
        defaultFieldTest('Zip: unknown', 0);
        //afterClickFieldTest('Zip: ' + addressTest.zip, 0);
    });

    it('renders and displays the phone', () => {
        defaultFieldTest('Phone: unknown', 0);
        //afterClickFieldTest('Phone: ' + addressTest.phone, 0);
    });

    it('renders and displays the website', () => {
        defaultFieldTest('Website: unknown', 0);
        //afterClickFieldTest('Website: ' + addressTest.website, 0);
    });

    it('renders and displays the contact', () => {
        defaultFieldTest('Contact: unknown', 0);
        // afterClickFieldTest('Contact: ' + addressTest.contact, 0);
    });
});
